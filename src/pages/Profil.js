import React, { useContext, useState, useEffect } from "react";
import { Container, Row, Col, Button, Form, Card } from "react-bootstrap";
import { AuthContext } from "../contexts/AuthContext";
import { useNavigate } from "react-router-dom";


export default function Profil() {
  const { logout, isLoggedIn, user, updateUserData } = useContext(AuthContext);
  const [username, setUsername] = useState(user?.name || "");
  const [tempUsername, setTempUsername] = useState("");
  const [email, setEmail] = useState(user?.email || "");
  const [tempEmail, setTempEmail] = useState("");
  const [password, setPassword] = useState("");  
  const navigate = useNavigate();

  useEffect(() => {
    if (!isLoggedIn) {
      navigate("/bejelentkezes");
    }
  }, [isLoggedIn, navigate]);  // Ha a user nincs bejelentkezve, ir√°ny√≠tson √°t
  
  useEffect(() => {
    if (user) {
      setUsername(user.name || "Ismeretlen felhaszn√°l√≥");
      setTempUsername(user.name || "");
      setEmail(user.email || ""); 
      setTempEmail(user.email || "");
    }
  }, [user]);
  
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      const user = JSON.parse(storedUser);
      setUsername(user.name);
      setEmail(user.email);
    }
  }, []);
  
  useEffect(() => {
    if (!user || !user.azonosito) {
      console.error("Nincs bejelentkezett felhaszn√°l√≥ vagy hi√°nyz√≥ azonos√≠t√≥.");
      return;
    }
  
    const fetchUser = async () => {
      try {
        const response = await fetch(`http://localhost:8000/api/get-user/${user.azonosito}`, { //http k√©r√©st k√ºld hogy frissitse a a felhaszn√°l√≥ adatokat backendb≈ël
          method: 'GET',
          credentials: 'include',
        });
  
        if (!response.ok) throw new Error("Felhaszn√°l√≥ nem tal√°lhat√≥");
  
        const data = await response.json();
        setUsername(data.user.name);
        localStorage.setItem('user', JSON.stringify(data.user));
      } catch (error) {
        console.error("Hiba a felhaszn√°l√≥ lek√©r√©sekor:", error);
      }
    };
  
    fetchUser();
  }, [user?.azonosito]); // Ellen≈ërizz√ºk, hogy van-e user √©s azonos√≠t√≥ja
  
  
  
  
  const getCsrfToken = () => {
    const match = document.cookie.match(new RegExp('(^| )XSRF-TOKEN=([^;]+)'));
    return match ? decodeURIComponent(match[2]) : null;
  };
  
  const handleSave = async () => {
    if (!user || !user.azonosito) {
      console.error("Felhaszn√°l√≥i ID nem tal√°lhat√≥.");
      return;
    }

  
    try {
      const updates = {
        name: tempUsername || username,
        email: tempEmail || email,
      };
  
      if (password.trim() !== "") {
        updates.password = password;
      }
  
      const response = await fetch(`http://localhost:8000/api/update-user/${user.azonosito}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-XSRF-TOKEN": getCsrfToken(),
        },
        credentials: "include",
        body: JSON.stringify(updates),
      });
  
      const data = await response.json();
  
      if (!response.ok) {
        throw new Error(data.message || "Hiba t√∂rt√©nt az adatok friss√≠t√©sekor");
      }
  
      setUsername(data.user.name);
      setTempUsername(data.user.name);
      setEmail(data.user.email);
      setTempEmail(data.user.email);
      
    
  
      localStorage.setItem("user", JSON.stringify(data.user));
  
      await updateUserData();
      console.log("Adatok sikeresen friss√≠tve:", data);
    } catch (error) {
      console.error("Hiba a ment√©skor:", error);
    }
  };
  
  return (
    <Container className="mt-5">
      <Row className="justify-content-center">
        <Col md={6} className="text-center">
          <Card className="profile-card">
            <Card.Body>
              <div className="profile-section mt-4">

                {/* Felhaszn√°l√≥i adatok megjelen√≠t√©se */}
                <div className="user-info mt-4">
                  <h4>Profil Inform√°ci√≥k</h4>
                  <p><strong>Felhaszn√°l√≥n√©v:</strong> {username || "Nincs megadva"}</p>
                  <p><strong>Email c√≠m:</strong> {email || "Nincs email megadva"}</p>
                </div>

                {/* Felhaszn√°l√≥n√©v m√≥dos√≠t√°sa */}
                <Form.Group controlId="username" className="mt-3">
                  <Form.Label>Felhaszn√°l√≥i n√©v m√≥dos√≠t√°sa:</Form.Label>
                  <Form.Control
                    type="text"
                    value={tempUsername}
                    onChange={(e) => setTempUsername(e.target.value)} // Csak a tempUsername friss√ºl
                    placeholder="√çrd be a neved..."
                  />


                </Form.Group>

                <Form.Group controlId="email" className="mt-3">
                  <Form.Label>Email c√≠m m√≥dos√≠t√°sa:</Form.Label>
                  <Form.Control
                    type="email"
                    value={tempEmail} // üîπ Most m√°r a tempEmail-t haszn√°lja
                    onChange={(e) => setTempEmail(e.target.value)} // üîπ Csak a tempEmail friss√ºl
                    placeholder="√çrd be az email c√≠med..."
                  />
                </Form.Group>


                {/* Jelsz√≥ m√≥dos√≠t√°sa */}
                <Form.Group controlId="password" className="mt-3">
                  <Form.Label>Jelsz√≥ m√≥dos√≠t√°sa:</Form.Label>
                  <Form.Control
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    placeholder="√çrd be az √∫j jelsz√≥t..."
                  />
                </Form.Group>

                <div className="d-flex justify-content-between align-items-center mt-4">
                  <Button variant="danger" onClick={logout}> 
                    Kijelentkez√©s
                  </Button>

                  <Button variant="primary" onClick={handleSave}>
                    Ment√©s
                  </Button>
                </div>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
}